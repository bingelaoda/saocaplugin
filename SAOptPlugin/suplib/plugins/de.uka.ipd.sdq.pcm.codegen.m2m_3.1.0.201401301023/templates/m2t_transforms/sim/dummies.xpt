«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT system»
«IMPORT core::composition»
«IMPORT usagemodel»
«IMPORT core::entity»
«IMPORT repository»
«IMPORT pcm::qosannotations::qos_performance»
«IMPORT pcm::qosannotations::qos_reliability»
«IMPORT pcm::reliability»

//-------------------------------
// In the simulation, generate a time delay
// and / or failure occurrences according
// to the specification in the QoS annotations
// of the system
//-------------------------------
«DEFINE DummyMethodBody(System s,OperationRequiredRole r) FOR OperationSignature»
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe resultStackFrame = 
		new de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe();
	«LET s.qosAnnotations_System.specifiedQoSAnnotations_QoSAnnotations.select(annotation | (SpecifiedReliabilityAnnotation.isInstance(annotation)) && (annotation.role_SpecifiedQoSAnnotation==r) && (annotation.signature_SpecifiedQoSAnnation==this)) AS annotations»
		«IF annotations.size == 1»
    // Simulate a failure that occurs with a predefined probability:
    if (ctx.getModel().getConfig().getSimulateFailures()) {   
    	double accProbability = 0;
    	double randValue = ctx.getModel().getConfiguration().getRandomGenerator().random();
    	«EXPAND FailureOccurrence(r.id, this.id) FOREACH ((SpecifiedReliabilityAnnotation)annotations.get(0)).externalFailureOccurrenceDescriptions__SpecifiedReliabilityAnnotation»
    }
		«ENDIF»
	«ENDLET»
	«LET s.qosAnnotations_System.specifiedQoSAnnotations_QoSAnnotations.select(annotation | (SystemSpecifiedExecutionTime.isInstance(annotation)) && (annotation.role_SpecifiedQoSAnnotation==r) && (annotation.signature_SpecifiedQoSAnnation==this)) AS annotations»
		«IF annotations.size == 1»
	double delay = de.uka.ipd.sdq.simucomframework.variables.converter.NumberConverter.toDouble(ctx.evaluate("«((SpecifiedExecutionTime)annotations.get(0)).specification_SpecifiedExecutionTime.specification.specificationString()»"));
	logger.info("SystemExternalCall «annotations.get(0).signature_SpecifiedQoSAnnation.entityName» delaying execution for "+delay);
	ctx.getThread().hold(delay);
		«ENDIF»
	«ENDLET»
	return resultStackFrame;
«ENDDEFINE»

«DEFINE DummyMethodBody(System s,InfrastructureRequiredRole r) FOR InfrastructureSignature»
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe resultStackFrame = 
		new de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe();
	«LET s.qosAnnotations_System.specifiedQoSAnnotations_QoSAnnotations.select(annotation | (SpecifiedReliabilityAnnotation.isInstance(annotation)) && (annotation.role_SpecifiedQoSAnnotation==r) && (annotation.signature_SpecifiedQoSAnnation==this)) AS annotations»
		«IF annotations.size == 1»
    // Simulate a failure that occurs with a predefined probability:
    if (ctx.getModel().getConfig().getSimulateFailures()) {   
    	double accProbability = 0;
    	double randValue = Math.random();
    	«EXPAND FailureOccurrence(r.id, this.id) FOREACH ((SpecifiedReliabilityAnnotation)annotations.get(0)).externalFailureOccurrenceDescriptions__SpecifiedReliabilityAnnotation»
    }
		«ENDIF»
	«ENDLET»
	«LET s.qosAnnotations_System.specifiedQoSAnnotations_QoSAnnotations.select(annotation | (SystemSpecifiedExecutionTime.isInstance(annotation)) && (annotation.role_SpecifiedQoSAnnotation==r) && (annotation.signature_SpecifiedQoSAnnation==this)) AS annotations»
		«IF annotations.size == 1»
	double delay = de.uka.ipd.sdq.simucomframework.variables.converter.NumberConverter.toDouble(ctx.evaluate("«((SpecifiedExecutionTime)annotations.get(0)).specification_SpecifiedExecutionTime.specification.specificationString()»"));
	logger.info("SystemExternalCall «annotations.get(0).signature_SpecifiedQoSAnnation.entityName» delaying execution for "+delay);
	ctx.getThread().hold(delay);
		«ENDIF»
	«ENDLET»
	return resultStackFrame;
«ENDDEFINE»

«DEFINE FailureOccurrence(String roleId, String signatureId) FOR ExternalFailureOccurrenceDescription»
    «LET "failureProbability"+this.failureType__ExternalFailureOccurrenceDescription.javaName() AS fp»
		double «fp»;
        try {
			    «fp» = Double.parseDouble("«this.failureProbability»");
		} catch (NumberFormatException exception) {
			    «fp» = 0.0;
		}
			accProbability += «fp»;
	  		if ((«fp» > 0.0) && (accProbability >= randValue)) {
				«EXPAND RaiseFailure(roleId, signatureId) FOR this.failureType__ExternalFailureOccurrenceDescription»
  		}
	«ENDLET» 
«ENDDEFINE»

«DEFINE RaiseFailure(String roleId, String signatureId) FOR FailureType»
	«ERROR "OAW GENERATION ERROR [m2t_transforms/sim/dummies.xpt]: Unknown FailureType found: " + this.entityName + " (type = " + this.metaType + "; id = " + this.id + ")"» 
«ENDDEFINE»

«DEFINE RaiseFailure(String roleId, String signatureId) FOR SoftwareInducedFailureType»
    de.uka.ipd.sdq.simucomframework.exceptions.FailureException.raise(
		de.uka.ipd.sdq.reliability.core.FailureStatistics.getInstance().getExternalSoftwareFailureType(
			"«this.id»", "«roleId»", "«signatureId»"));
«ENDDEFINE»

«DEFINE RaiseFailure(String roleId, String signatureId) FOR HardwareInducedFailureType»
    de.uka.ipd.sdq.simucomframework.exceptions.FailureException.raise(
		de.uka.ipd.sdq.reliability.core.FailureStatistics.getInstance().getExternalHardwareFailureType(
		    "«this.processingResourceType__HardwareInducedFailureType.id»", "«roleId»", "«signatureId»"));
«ENDDEFINE»

«DEFINE RaiseFailure(String roleId, String signatureId) FOR NetworkInducedFailureType»
    de.uka.ipd.sdq.simucomframework.exceptions.FailureException.raise(
		de.uka.ipd.sdq.reliability.core.FailureStatistics.getInstance().getExternalNetworkFailureType(
			"«this.communicationLinkResourceType__NetworkInducedFailureType.id»", "«roleId»", "«signatureId»"));
«ENDDEFINE»

