«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«EXTENSION m2t_transforms::sensors»
«IMPORT repository»
«IMPORT usagemodel»
«IMPORT system»
«IMPORT seff»
«IMPORT pcm»

«DEFINE SetupCalculators FOR UsageScenario»
	// Setup calculator for usage scenario «this.entityName»
	«EXPAND m2t_transforms::calculators::SetupCalculatorResponseTime("start" + this.entityName, "end" + this.entityName) FOR this.entityName»
	if(getModel().getConfiguration().getSimulateFailures()){
		«EXPAND m2t_transforms::calculators::SetupCalculatorExecutionResult FOR this»
	}

	«EXPAND SetupCalculators FOREACH this.querySystemCalls()»
«ENDDEFINE»

«DEFINE SetupCalculators FOR EntryLevelSystemCall»
	«LET "Call_"+this.operationSignature__EntryLevelSystemCall.javaSignature()+" <EntryLevelSystemCall id: "+this.id+" >" AS callName»
		// Setup calculator for system call «this.entityName» («this.id»)
		«EXPAND m2t_transforms::calculators::SetupCalculatorResponseTime("start"+callName, "end"+callName) FOR callName»
	«ENDLET»
«ENDDEFINE»

«DEFINE SetupCalculators FOR RepositoryComponent»
	«IF BasicComponent.isInstance(this) »
		«EXPAND SetupCalculators FOREACH ((BasicComponent)this).serviceEffectSpecifications__BasicComponent»
	«ENDIF»  
	«REM»TODO: Should there be calculators for RepositoryComponents other than BasicComponent?«ENDREM» 
«ENDDEFINE»

«DEFINE SetupCalculators FOR ServiceEffectSpecification»
	«ERROR "This should never be called!"»
«ENDDEFINE»

«DEFINE SetupCalculators FOR ResourceDemandingSEFF»
	// Setup calculators for service call «this.describedService__SEFF.entityName»,
	// contained ExternalCallActions: «this.steps_Behaviour.findStart().queryExternalCallActions({}).entityName» («this.steps_Behaviour.findStart().queryExternalCallActions({}).id»)
	«EXPAND SetupCalculators FOREACH this.steps_Behaviour.findStart().queryExternalCallActions({})»
	«REM»Remove the following two lines in order to disable measurements on infrastructure calls«ENDREM»
	// contained InternalActions: «this.steps_Behaviour.findStart().queryInternalActions({}).entityName» («this.steps_Behaviour.findStart().queryInternalActions({}).id»)
	«EXPAND SetupCalculators FOREACH this.steps_Behaviour.findStart().queryInternalActions({})»
«ENDDEFINE»

«DEFINE SetupCalculators FOR ExternalCallAction»
	// Old: "Call "+this.calledService_ExternalService.interface__OperationSignature.entityName+"."+this.calledService_ExternalService.javaSignature()+" <AssemblyCtx: \"+this.assemblyContextID+\", CallID: "+ this.id +">"
	«LET externalCallActionDescription(this.calledService_ExternalService, this) AS callName»
		// ExternalCallAction «this.entityName» («this.id»)
		«EXPAND m2t_transforms::calculators::SetupCalculatorResponseTime("start" + callName, "end" + callName) FOR callName»
		if(getModel().getConfiguration().getSimulateFailures()){
			«EXPAND m2t_transforms::calculators::SetupCalculatorExecutionResult(callName) FOR this»
		}
	«ENDLET»
«ENDDEFINE»

«DEFINE SetupCalculators FOR InternalAction»
	«FOREACH this.infrastructureCall__Action AS infrastructureCall»
		«LET internalActionDescription(infrastructureCall.signature__InfrastructureCall, this) AS callName»
			// InternalAction «this.entityName» («this.id»)
			«EXPAND m2t_transforms::calculators::SetupCalculatorResponseTime("start" + callName, "end" + callName) FOR callName»
		«ENDLET»
	«ENDFOREACH»
«ENDDEFINE»

«REM»
«DEFINE CalculatorRoot FOR UsageModel»
	«FILE "main/CalculatorRepositoryFactory.java"»
		package main;
		import de.uka.ipd.sdq.simucomframework.calculator.CalculatorRepository;
		import de.uka.ipd.sdq.simucomframework.calculator.ICalculatorRepositoryFactory;
		import de.uka.ipd.sdq.probespec.framework.SampleBlackboard;
		import de.uka.ipd.sdq.pipesandfilters.framework.recorder.*;
		import de.uka.ipd.sdq.pipesandfilters.framework.*;
		import de.uka.ipd.sdq.probespec.framework.calculator.*;
		
		public class CalculatorRepositoryFactory implements ICalculatorRepositoryFactory {
		
			private static CalculatorRepositoryFactory instance = new CalculatorRepositoryFactory();
			
			public CalculatorRepository createCalculatorRepository(SampleBlackboard blackboard) {
				CalculatorRepository repository = new CalculatorRepository();
				
				«EXPAND CreateCalculatorForUsageScenario FOREACH this.usageScenario_UsageModel»
				
				return repository;
			}
		
			public static CalculatorRepositoryFactory getInstance() {
				return instance;
			}
		}
	«ENDFILE»
«ENDDEFINE»
«ENDREM»

«REM»
«DEFINE CalculatorRoot FOR Repository»
	«IF this.components__Repository.size > 0»
		«FILE this.basePackageName() + "/CalculatorFactory.java"»
			package «this.basePackageName()»;
			
			// CalculatorRoot FOR Repository: «this.datatypes_Repository.toString()»
			public class CalculatorFactory {
				public static void createCalculators(String assemblyContext) {
					«EXPAND CreateCalculatorForComponents FOREACH this.components__Repository»
				}
			}
		«ENDFILE»
	«ENDIF»
«ENDDEFINE»

«DEFINE CreateCalculatorForComponents FOR RepositoryComponent»
	// Nothing to do?? (Create calculators solely for BasicComponents?)
«ENDDEFINE»

«DEFINE CreateCalculatorForComponents FOR BasicComponent»
	// CreateCalculatorForComponents FOR BasicComponent
	«EXPAND CreateCalculatorForComponents(this) FOREACH this.serviceEffectSpecifications__BasicComponent.describedService__SEFF»
«ENDDEFINE»

«DEFINE CreateCalculatorForComponents(RepositoryComponent component) FOR Signature»
	// CreateCalculatorForComponents(RepositoryComponent component) FOR Signature
	«IF this.hasSEFF(component)»
   	  	«LET ((ResourceDemandingSEFF)this.getSEFF(component)) AS seff»
	      «EXPAND CreateCalculatorForComponents FOREACH seff.steps_Behaviour.findStart().queryExternalCallActions({})»      
    	«ENDLET»
   	  «ENDIF»
«ENDDEFINE»

«DEFINE CreateCalculatorForComponents FOR ExternalCallAction»
	// CreateCalculatorForComponents FOR ExternalCallAction
	// «this.entityName»
«ENDDEFINE»«ENDREM»

«REM»Creates one calculator for each UsageScenario«ENDREM»
«REM»«DEFINE CreateCalculatorForUsageScenario FOR UsageScenario»
	// Initialise calculator for «this.entityName»
	Recorder recorder = new RawRecorder(new ConsoleWriteStrategy());
	PipesAndFiltersManager pipesAndFiltersManager = new PipesAndFiltersManager(recorder);
	Calculator calculator = new ResponseTimeCalculator(blackboard,
			"start«this.entityName»", "end«this.entityName»");
	calculator.setPipesAndFiltersManager(pipesAndFiltersManager);
	repository.addCalculator("«this.entityName»", calculator);
	
	// «this.scenarioBehaviour_UsageScenario.querySystemCalls()»
«ENDDEFINE»

«DEFINE CreateCalculators FOR System»
	«this.toString()»
«ENDDEFINE» 

«DEFINE CreateCalculator FOR EntryLevelSystemCall»
	// Create calculator for «this.toString()»
«ENDDEFINE»
«ENDREM»