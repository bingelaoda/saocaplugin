«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«EXTENSION m2t_transforms::sim::accuracyInfluence»
«IMPORT seff»
«IMPORT repository»
«IMPORT completions»
«IMPORT reliability»
«IMPORT qualityannotation»
«IMPORT parameters::pcm»

// ----------------------------
// SimuCom templates for parts of a SEFF
// ----------------------------
«DEFINE Action FOR CollectionIteratorAction»
   for (int iterationCount = 0, maxIterationCount = (Integer)ctx.evaluate("«this.parameter_CollectionIteratorAction.parameterName».NUMBER_OF_ELEMENTS",Integer.class);
            iterationCount < maxIterationCount; iterationCount++) {
       	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> loopFrame = ctx.getStack().createAndPushNewStackFrame(ctx.getStack().currentStackFrame());
       	ctx.evaluateInner(loopFrame, "«this.parameter_CollectionIteratorAction.parameterName».INNER");

       «EXPAND m2t_transforms::sim::java_core::ActionsAsCalls FOR this.bodyBehaviour_Loop.steps_Behaviour.findStart()»
	   ctx.getStack().removeStackFrame();
   }
«ENDDEFINE»

«DEFINE Action FOR LoopAction»
   for (int iterationCount«id.javaVariableName()» = 0, maxIterationCount«id.javaVariableName()» = (Integer)ctx.evaluate("«this.iterationCount_LoopAction.specification.specificationString()»",Integer.class);
            iterationCount«id.javaVariableName()» < maxIterationCount«id.javaVariableName()»; iterationCount«id.javaVariableName()»++){
       «EXPAND m2t_transforms::sim::java_core::ActionsAsCalls FOR this.bodyBehaviour_Loop.steps_Behaviour.findStart()»
   }
«ENDDEFINE»

«DEFINE FailureInternalActionPreTM FOR InternalAction»
	«IF this.internalFailureOccurrenceDescriptions__InternalAction.size > 0»
    // Simulate a failure that occurs with a predefined probability:
    if (ctx.getModel().getConfig().getSimulateFailures()) {
    	double accProbability = 0;
    	double randValue = ctx.getModel().getConfiguration().getRandomGenerator().random();
    	«EXPAND FailureOccurrence FOREACH this.internalFailureOccurrenceDescriptions__InternalAction»
    }
    «ENDIF»
«ENDDEFINE»

«DEFINE FailureOccurrence FOR InternalFailureOccurrenceDescription»
    «LET "failureProbability"+this.softwareInducedFailureType__InternalFailureOccurrenceDescription.javaName() AS fp»
		double «fp»;
        try {
			    «fp» = Double.parseDouble("«this.failureProbability»");
		} catch (NumberFormatException exception) {
			    «fp» = 0.0;
		}
			accProbability += «fp»;
	  		if ((«fp» > 0.0) && (accProbability >= randValue)) {
				«EXPAND RaiseInternalSoftwareFailure(this.internalAction__InternalFailureOccurrenceDescription.id) FOR this.softwareInducedFailureType__InternalFailureOccurrenceDescription»
  		}
	«ENDLET»
«ENDDEFINE»

«DEFINE RaiseInternalSoftwareFailure(String internalActionId) FOR SoftwareInducedFailureType»
    de.uka.ipd.sdq.simucomframework.exceptions.FailureException.raise(
		de.uka.ipd.sdq.reliability.core.FailureStatistics.getInstance().getInternalSoftwareFailureType(
			"«this.id»", "«internalActionId»"));
«ENDDEFINE»

«DEFINE Action FOR BranchAction»
	{
		«LET this.id.javaVariableName() AS counterID»
			«IF ProbabilisticBranchTransition.isInstance(this.branches_Branch.get(0))»
				double u«counterID» = (Double)ctx.evaluate("DoublePDF[(1;1.0)]",Double.class);
				double sum«counterID» = 0;
				«EXPAND BranchTransition(counterID) FOREACH this.branches_Branch SEPARATOR ""»
			«ELSE»
				«EXPAND BranchTransition(counterID) FOREACH this.branches_Branch SEPARATOR " else "»
				else
				    logger.error("No branch condition evaluated to true in «this.entityName» :-(");  
					
			«ENDIF»
		«ENDLET»
	}
«ENDDEFINE»

«DEFINE BranchTransition(String counterNumber) FOR AbstractBranchTransition»
   «ERROR "OAW GENERATION ERROR [m2t_transforms/sim/seff.xpt]: Unknown branch transition found!"»
«ENDDEFINE»

«DEFINE BranchTransition(String counterNumber) FOR GuardedBranchTransition»
	if ((Boolean)ctx.evaluate("«this.branchCondition_GuardedBranchTransition.specification.specificationString()»") == true)
	{
		«EXPAND m2t_transforms::sim::java_core::ActionsAsCalls FOR this.branchBehaviour_BranchTransition.steps_Behaviour.findStart()»
	}
«ENDDEFINE»

«DEFINE BranchTransition(String counterNumber) FOR ProbabilisticBranchTransition»
	if (sum«counterNumber» <= u«counterNumber» && u«counterNumber» < sum«counterNumber» + «this.branchProbability» )
	{
		«EXPAND m2t_transforms::sim::java_core::ActionsAsCalls FOR this.branchBehaviour_BranchTransition.steps_Behaviour.findStart()»
	}
	sum«counterNumber» += «this.branchProbability»;
«ENDDEFINE»

«DEFINE Action FOR AcquireAction»
	// Acquire «this.passiveresource_AcquireAction»
	{
	  //TODO Here, a resource demand of 0 is issued to a hard-coded resource "CPU"
      double demand = de.uka.ipd.sdq.simucomframework.variables.converter.NumberConverter.toDouble(ctx.evaluate("0",Double.class));
      ctx.findResource(this.assemblyContextID).loadActiveResource(ctx.getThread(),"CPU",demand);
    }
	if (pr_«this.passiveresource_AcquireAction.id.javaVariableName()» == null) {
		// Initialise Resource First...
		pr_«this.passiveresource_AcquireAction.id.javaVariableName()» = ctx.getPassiveRessourceInContext(this.assemblyContextID, "«this.passiveresource_AcquireAction.entityName»", "«this.passiveresource_AcquireAction.id»", ctx.findResource(assemblyContextID), (Integer)ctx.evaluate("«this.passiveresource_AcquireAction.capacity_PassiveResource.specification.specificationString()»",Integer.class));
	}
	pr_«this.passiveresource_AcquireAction.id.javaVariableName()».acquire(ctx.getThread(), 1, «this.timeout», «this.timeoutValue»);
«ENDDEFINE»

«DEFINE Action FOR ReleaseAction»
	// Release «this.passiveResource_ReleaseAction»
	if (pr_«this.passiveResource_ReleaseAction.id.javaVariableName()» == null) {
		// Initialise Resource First...
		pr_«this.passiveResource_ReleaseAction.id.javaVariableName()» = ctx.getPassiveRessourceInContext(this.assemblyContextID, "«this.passiveResource_ReleaseAction.entityName»", "«this.passiveResource_ReleaseAction.id»", ctx.findResource(assemblyContextID), (Integer)ctx.evaluate("«this.passiveResource_ReleaseAction.capacity_PassiveResource.specification.specificationString()»",Integer.class));
	}
	pr_«this.passiveResource_ReleaseAction.id.javaVariableName()».release(ctx.getThread(), 1);
«ENDDEFINE»

«DEFINE Action FOR StartAction»
	«IF ResourceDemandingSEFF.isInstance(this.eContainer)»«LET ((ResourceDemandingSEFF)this.eContainer) AS rdseff»
		«REM»Handle accuracy influence analysis. «ENDREM»
		«LET rdseff.getQualityAnnotation() AS qualityAnnotation»
			«IF qualityAnnotation != null»
				«EXPAND m2t_transforms::sim::accuracy::CheckAccuracy(rdseff, this) FOREACH getQualityAnnotation(rdseff).validForParameterPartitions.typeSelect(PCMParameterPartition).select(partition| PCMOperationParameterReference.isInstance(partition.parameterReference) || PCMComponentParameterReference.isInstance(partition.parameterReference))»
			«ELSE»
				«IF getQualityAnnotationRepository() != null»
					«REM»Accuracy analysis was requested but no quality annotation could be found for this RDSEFF«ENDREM»
					SeverityAndIssue issue = AccuracyIssueFactory.createMissingQualityAnnotationIssue("«rdseff.getResourceName()»", "«rdseff.id»");
					config.addIssue(issue);
				«ELSE»
					«REM»Accuracy analysis was not requested. Do nothing.«ENDREM»
				«ENDIF»
			«ENDIF»
		«ENDLET»
	«ENDLET»«ENDIF»
«ENDDEFINE»

«DEFINE Action FOR StopAction»
«ENDDEFINE»

«DEFINE Action FOR SetVariableAction»
	«FOREACH this.localVariableUsages_SetVariableAction AS pu»
		«FOREACH pu.variableCharacterisation_VariableUsage AS vc»
			«IF pu.namedReference__VariableUsage.isInnerReference()»
				resultStackFrame.addValue("«pu.parameterUsageLHS()».«vc.type.toString()»",
				   	new de.uka.ipd.sdq.simucomframework.variables.EvaluationProxy("«vc.specification_VariableCharacterisation.specification.specificationString()»",methodBodyStackFrame.copyFrame()));
			«ELSE»
				resultStackFrame.addValue("«pu.parameterUsageLHS()».«vc.type.toString()»",
					ctx.evaluate("«vc.specification_VariableCharacterisation.specification.specificationString()»"));
			«ENDIF»
		«ENDFOREACH»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE Action FOR ForkAction»
	{
		de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess[] forks =
			new de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess[]{
			«FOREACH this.asynchronousForkedBehaviours_ForkAction AS f SEPARATOR ","»
				new de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess(ctx,assemblyContextID,true, ctx.getThread().getPriority()){
					public void executeBehaviour() {
						try {
							«EXPAND m2t_transforms::sim::java_core::ActionsAsCalls FOR f.steps_Behaviour.findStart()»
						} catch (de.uka.ipd.sdq.simucomframework.exceptions.FailureException exception) {
							if (ctx.getModel().getConfig().getSimulateFailures()) {
								de.uka.ipd.sdq.reliability.core.FailureStatistics.getInstance().increaseUnhandledFailureCounter(exception.getFailureType(), ctx.getSessionId());
							}
						}
					}
				}
			«ENDFOREACH»
			«IF this.asynchronousForkedBehaviours_ForkAction.size > 0»
			,
			«ENDIF»
			«IF this.synchronisingBehaviours_ForkAction != null»
				«FOREACH this.synchronisingBehaviours_ForkAction.synchronousForkedBehaviours_SynchronisationPoint AS f SEPARATOR ","»
					new de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess(ctx,assemblyContextID,false){
						public void executeBehaviour() {
							try {
								«EXPAND m2t_transforms::sim::java_core::ActionsAsCalls FOR f.steps_Behaviour.findStart()»
							} catch (de.uka.ipd.sdq.simucomframework.exceptions.FailureException exception) {
								if (ctx.getModel().getConfig().getSimulateFailures()) {
									de.uka.ipd.sdq.reliability.core.FailureStatistics.getInstance().increaseUnhandledFailureCounter(exception.getFailureType(), ctx.getSessionId());
								}
							}
						}
					}
				«ENDFOREACH»
			«ENDIF»
			};
		new de.uka.ipd.sdq.simucomframework.fork.ForkExecutor(ctx.getThread(),forks).run();
	}
«ENDDEFINE»

«DEFINE Action FOR DelegatingExternalCallAction»
{
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> currentFrame = ctx
			.getStack().currentStackFrame();
	// prepare stackframe
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> stackframe = ctx
			.getStack().createAndPushNewStackFrame(currentFrame);
	stackframe.addVariables(methodBodyStackFrame);
	«REM» It is also required to add the variables from the result stack here in the exceptional case of completions
	      because the bytesize data for the network load can only be stored there but at the same time needs
	      to be passed to the next component in the delegation chain. «ENDREM»
	stackframe.addVariables(resultStackFrame);


	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> callResult =
   	myContext.getRole«this.role_ExternalService.javaName()»().«this.calledService_ExternalService.javaSignature()»
	   	(«EXPAND m2t_transforms::java_core::ParameterUsageListTM FOR this.calledService_ExternalService»);
	resultStackFrame.addVariables(callResult);
	// Copy the result variables in my own stack frame so that we can access them in the post actions
	methodBodyStackFrame.addVariables(callResult);

	ctx.getStack().removeStackFrame();
}
«ENDDEFINE»
