«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT repository»
«IMPORT seff::seff_performance»
«IMPORT resourcetype»
«IMPORT completions»
«IMPORT resourceenvironment»

// ----------------------------
// Templates to generate simulated resources and resource environments
// ----------------------------

// Old: Load the resource demand on a simulated resource
«DEFINE ResourceDemand FOR ParametricResourceDemand»
    {
      double demand = de.uka.ipd.sdq.simucomframework.variables.converter.NumberConverter.toDouble(ctx.evaluate("«this.specification_ParametericResourceDemand.specification.specificationString()»",Double.class));
      ctx.findResource(this.assemblyContextID).loadActiveResource(ctx.getThread(),"«this.requiredResource_ParametricResourceDemand.entityName»",demand);
    }
«ENDDEFINE»

«DEFINE ResourceDemand FOR NetworkDemandParametricResourceDemand»
    {
      double demand = de.uka.ipd.sdq.simucomframework.variables.converter.NumberConverter.toDouble(ctx.evaluate("«this.specification_ParametericResourceDemand.specification.specificationString()»",Double.class));
      ctx.findResource(this.assemblyContextID).loadActiveResource(ctx.getThread(),"«this.requiredCommunicationLinkResource_ParametricResourceDemand.entityName»",demand);
    }
«ENDDEFINE»

// New: Load resource demand using ResourceInterfaces
«DEFINE ResourceDemand FOR ResourceCall»
   {
      double demand = de.uka.ipd.sdq.simucomframework.variables.converter.NumberConverter.toDouble(ctx.evaluate("«this.numberOfCalls__ResourceCall.specification.specificationString()»",Double.class));
      ctx.findResource(this.assemblyContextID).loadActiveResource(ctx.getThread(),"«this.resourceRequiredRole__ResourceCall.requiredResourceInterface__ResourceRequiredRole.entityName.javaString()»",«this.signature__ResourceCall.resourceServiceId»,demand);
   }
«ENDDEFINE»

// ----------------------------
// Templates for a simulated resource environment
// Generate a class which contains the model information
// and sets up simulated resources accordingly
// ----------------------------
«DEFINE ResourceEnvironmentRoot FOR resourceenvironment::ResourceEnvironment»
	«FILE "main/ResourceEnvironment.java"»
		package main;
		
		public class ResourceEnvironment implements de.uka.ipd.sdq.simucomframework.resources.IResourceContainerFactory {
			
			private static final ResourceEnvironment instance = new ResourceEnvironment();
			
			public static ResourceEnvironment getInstance() {
				return instance;
			}
		
		   «EXPAND ResourceContainerInit FOR this»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE ResourceContainerInit FOR ResourceEnvironment»
	public String[] getResourceContainerIDList() {
		java.util.List<String> resourceContainerIds = new java.util.ArrayList<String>();
		«EXPAND ResourceContainerAdd FOREACH this.resourceContainer_ResourceEnvironment»
		return resourceContainerIds.toArray(new String[]{});
	}

	public String[] getLinkingResourceContainerIDList() {
		return new String[] { 
			«FOREACH this.linkingResources__ResourceEnvironment AS rc SEPARATOR ","»
				"«rc.id»"
			«ENDFOREACH»
		};
	}
	
	public java.util.ArrayList<String> getFromResourceContainerID(String linkingResourceContainerID) {
		java.util.ArrayList<String> resultList = new java.util.ArrayList<String>();
		«FOREACH this.linkingResources__ResourceEnvironment AS rc»
			if(linkingResourceContainerID.equals("«rc.id»")) {
			«FOREACH rc.connectedResourceContainers_LinkingResource.id AS id»
				resultList.add("«id»");
			«ENDFOREACH»
			}
		«ENDFOREACH»
		return resultList;
	}
	
	public java.util.ArrayList<String> getToResourceContainerID(String linkingResourceContainerID) {
		java.util.ArrayList<String> resultList = new java.util.ArrayList<String>();
		«FOREACH this.linkingResources__ResourceEnvironment AS rc»
			if (linkingResourceContainerID.equals("«rc.id»")) {
			«FOREACH rc.connectedResourceContainers_LinkingResource.id AS id»
				resultList.add("«id»");
			«ENDFOREACH»
			}
		«ENDFOREACH»
		return resultList;
	}
	
	public String getLinkingResourceContainerID(String fromResourceContainerID, String toResourceContainerID) {
		for (String id: getLinkingResourceContainerIDList()) {
			if (getFromResourceContainerID(id).contains(fromResourceContainerID) && getToResourceContainerID(id).contains(toResourceContainerID)) {
				return id;
			}
		}
		return null;
	}
	
	public void fillResourceContainerWithResources(de.uka.ipd.sdq.simucomframework.resources.SimulatedResourceContainer rc) {
		«EXPAND ResourceContainerCaseResources FOREACH this.resourceContainer_ResourceEnvironment»
			throw new RuntimeException("Unknown resource container should be initialised. This should never happen");	
	}
	
	public void fillResourceContainerWithNestedResourceContainers(de.uka.ipd.sdq.simucomframework.resources.SimulatedResourceContainer rc) {
		«EXPAND ResourceContainerCaseResourceContainers FOREACH this.resourceContainer_ResourceEnvironment»
			throw new RuntimeException("Unknown resource container should be initialised. This should never happen");	
	}

	public void fillLinkingResourceContainer(de.uka.ipd.sdq.simucomframework.resources.SimulatedLinkingResourceContainer rc) {
		«EXPAND LinkingResourceCase FOREACH this.linkingResources__ResourceEnvironment SEPARATOR " else "»
		«IF this.linkingResources__ResourceEnvironment.size > 0»
		else
			throw new RuntimeException("Unknown resource container should be initialised. This should never happen");
		«ENDIF»	
	}

«ENDDEFINE»

«DEFINE ResourceContainerAdd FOR ResourceContainer»
	resourceContainerIds.add("«this.id»");
	«EXPAND ResourceContainerAdd FOREACH this.nestedResourceContainers__ResourceContainer»
«ENDDEFINE»

«DEFINE ResourceContainerCaseResources FOR ResourceContainer»
	if (rc.getResourceContainerID().equals("«this.id»")) {
		«EXPAND ActiveResourceAdd FOREACH this.activeResourceSpecifications_ResourceContainer»
		«REM» Refactor!
		«EXPAND PassiveResourceAdd FOREACH this.passiveResourceSpecifications_ResourceContainer»
		«ENDREM»
	} else 
	«EXPAND ResourceContainerCaseResources FOREACH this.nestedResourceContainers__ResourceContainer»
«ENDDEFINE»

«DEFINE ResourceContainerCaseResourceContainers FOR ResourceContainer»
	if (rc.getResourceContainerID().equals("«this.id»")) {
		«EXPAND NestedResourceContainerAdd FOREACH this.nestedResourceContainers__ResourceContainer»
		«IF this.parentResourceContainer__ResourceContainer != null»
		«EXPAND ParentResourceContainerAdd FOR this.parentResourceContainer__ResourceContainer»
		«ENDIF»
	} else 
	«EXPAND ResourceContainerCaseResourceContainers FOREACH this.nestedResourceContainers__ResourceContainer»
«ENDDEFINE»

«DEFINE LinkingResourceCase FOR LinkingResource»
	if (rc.getResourceContainerID().equals("«this.id»")) {
		«EXPAND LinkingResourceAdd FOR this.communicationLinkResourceSpecifications_LinkingResource»
	}
«ENDDEFINE»

«DEFINE LinkingResourceAdd FOR CommunicationLinkResourceSpecification»
	rc.addActiveResource(
	    "«this.linkingResource_CommunicationLinkResourceSpecification.id»",
		"«this.communicationLinkResourceType_CommunicationLinkResourceSpecification.entityName»",
		rc.getResourceContainerID(),
		"«this.communicationLinkResourceType_CommunicationLinkResourceSpecification.id»",
		"«((LinkingResource)this.eContainer).entityName.specificationString()» [«this.communicationLinkResourceType_CommunicationLinkResourceSpecification.entityName»] <«((LinkingResource)this.eContainer).id»>",
		"«this.throughput_CommunicationLinkResourceSpecification.specification.specificationString()»",
		"«this.latency_CommunicationLinkResourceSpecification.specification.specificationString()»",
		«this.failureProbability»);
«ENDDEFINE»

«DEFINE NestedResourceContainerAdd FOR ResourceContainer»
	rc.addNestedResourceContainer("«this.id»");
«ENDDEFINE»

«DEFINE ParentResourceContainerAdd FOR ResourceContainer»
	rc.setParentResourceContainer("«this.id»");
«ENDDEFINE»

«DEFINE ActiveResourceAdd FOR ProcessingResourceSpecification»
	String[] «this.activeResourceType_ActiveResourceSpecification.id.javaVariableName()»_provInterfaces = null;
	«IF this.activeResourceType_ActiveResourceSpecification.resourceProvidedRoles__ResourceInterfaceProvidingEntity.isEmpty»
	«ELSE»
		«this.activeResourceType_ActiveResourceSpecification.id.javaVariableName()»_provInterfaces = new String[«this.activeResourceType_ActiveResourceSpecification.resourceProvidedRoles__ResourceInterfaceProvidingEntity.size»];
		«FOREACH this.activeResourceType_ActiveResourceSpecification.resourceProvidedRoles__ResourceInterfaceProvidingEntity AS resProvRole ITERATOR iter»
			«this.activeResourceType_ActiveResourceSpecification.id.javaVariableName()»_provInterfaces[«iter.counter0»] = "«resProvRole.providedResourceInterface__ResourceProvidedRole.entityName.javaString()»";
		«ENDFOREACH»
	«ENDIF»
	rc.addActiveResource(
		"«this.activeResourceType_ActiveResourceSpecification.entityName»",
		«this.activeResourceType_ActiveResourceSpecification.id.javaVariableName()»_provInterfaces,
		rc.getResourceContainerID(),
		"«this.activeResourceType_ActiveResourceSpecification.id»",
		"«((ResourceContainer)this.eContainer).entityName.specificationString()» [«this.activeResourceType_ActiveResourceSpecification.entityName»] <«((ResourceContainer)this.eContainer).id»>",
		"«this.processingRate_ProcessingResourceSpecification.specification.specificationString()»",
		«this.MTTF»,
		«this.MTTR»,
		"TODO: unit!",
		«EXPAND SchedulingStrategy(((ResourceContainer)this.eContainer)) FOR this»,
		«this.numberOfReplicas»,
		«this.requiredByContainer»);
«ENDDEFINE»

«DEFINE SchedulingStrategy(ResourceContainer container) FOR ProcessingResourceSpecification»
	«IF (this.schedulingPolicy.id == "FCFS") || (this.schedulingPolicy.id == "ProcessorSharing") || (this.schedulingPolicy.id == "Delay")»
		«IF this.schedulingPolicy.id == "FCFS"»
			de.uka.ipd.sdq.simucomframework.resources.SchedulingStrategy.FCFS
		«ENDIF»
		«IF this.schedulingPolicy.id == "ProcessorSharing"»
			de.uka.ipd.sdq.simucomframework.resources.SchedulingStrategy.PROCESSOR_SHARING
		«ENDIF»
		«IF this.schedulingPolicy.id == "Delay"»
			de.uka.ipd.sdq.simucomframework.resources.SchedulingStrategy.DELAY
		«ENDIF»
	«ELSE»
		"«this.schedulingPolicy.id»"
	«ENDIF»
«ENDDEFINE»

«REM»TODO: Refactor
«DEFINE PassiveResourceAdd FOR PassiveResourceSpecification»
	rc.addPassiveResource(
		"«this.passiveResourceType_PassiveResourceSpecification.entityName»",
		«this.capacity»);
«ENDDEFINE»
«ENDREM»
